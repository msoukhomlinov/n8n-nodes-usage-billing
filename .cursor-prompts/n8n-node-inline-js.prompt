Analyze or create n8n node inline JavaScript expressions following these guidelines:

Tournament Engine Support:
- Uses Tournament Templating Engine (n8n v1.9.0+)
- Provides built-in transformation functions
- Enables method chaining
- Type-aware operations
- Integrated with n8n variables

Inline Expression Rules:
- Must be single-line expressions
- Enclosed in {{ ... }}
- Can use built-in transformation functions
- Can chain multiple methods
- Can access node data via $("NodeName")
- Can use built-in variables ($json, $binary, etc.)

Available Transformations:
1. String Operations:
   - .isEmail()
   - .extractDomain()
   - .removeTags()
   - .base64Encode()/Decode()
   - .toSnakeCase()/toCamelCase()

2. Array Operations:
   - .sum()
   - .removeDuplicates()
   - .merge()
   - .isEmpty()
   - .randomItem()
   - .first()/last()

3. Number Operations:
   - .round()
   - .toBoolean()
   - .format()
   - .isEven()/isOdd()

4. Object Operations:
   - .isEmpty()
   - .removeField()
   - .merge()
   - .toJsonString()

5. Date Operations (Luxon):
   - .toDateTime()
   - .plus()/minus()
   - .format()
   - .isWeekend()

Built-in Methods:
- $if(condition, ifTrue, ifFalse)
- $ifEmpty(value, defaultValue)
- $max()/$min()
- $evaluateExpression()

JMESPath Queries:
- Use $jmespath() for complex JSON queries
- Support array filtering and projection
- Enable nested property access
- Allow complex transformations
- Support mathematical operations

Example Patterns:
1. Chained Transformations:
   {{ "hello@example.com".isEmail().toBoolean() }}
   {{ [1,2,2,3].removeDuplicates().sum() }}

2. Date Manipulations:
   {{ "2023-01-01".toDateTime().plus(1, "week").format("yyyy-MM-dd") }}

3. Complex Data Access:
   {{ $("PreviousNode").item.json.users[0].email.isEmail() }}

4. JMESPath Examples:
   {{ $jmespath($json, "users[?age > `25`].name") }}

The expression to analyze/create should: 