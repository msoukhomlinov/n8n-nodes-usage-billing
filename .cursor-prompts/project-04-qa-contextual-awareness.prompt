# QA DEVELOPMENT AND CONTEXTUAL AWARENESS
# Purpose: Guide thorough QA review and deep understanding of existing codebase while maintaining project tracking
# Usage: Use this prompt for comprehensive code review, quality assurance, and gaining contextual awareness

# NOTEPAD UTILISATION
1. Review Project Goals:
   ```yaml
   notepad_references:
     goals: .project-tracker/notepads/goals.yaml
     focus: 
       - Quality objectives
       - Architectural principles
       - Development standards
   ```

2. Update Context:
   ```yaml
   notepad_references:
     context: .project-tracker/notepads/context.yaml
     updates:
       - Current phase status
       - Priority areas
       - Known issues
       - Quality metrics
   ```

3. Track Progress:
   ```yaml
   notepad_references:
     progress: .project-tracker/notepads/progress.yaml
     record:
       - Completed reviews
       - Ongoing analysis
       - Pending tasks
   ```

4. Maintain Knowledge:
   ```yaml
   notepad_references:
     knowledge: .project-tracker/notepads/knowledge.yaml
     document:
       - Best practices findings
       - Lessons learned
       - Technical debt items
   ```

# PREREQUISITES AND SETUP
1. Verify QA Environment:
   ```yaml
   required_setup:
     tracking_files:
       - .project-tracker/core/project.yaml
       - .project-tracker/progress/phases.yaml
       - .project-tracker/records/decisions/
     testing_environment:
       - Test database configuration
       - Test data fixtures
       - Testing frameworks
     tools:
       - Code coverage tools
       - Linting configuration
       - Static analysis tools
   ```

2. Load Project Context:
   ```yaml
   context_points:
     project_metadata:
       - Project objectives from project.yaml
       - Current phase status
       - Known constraints
     quality_gates:
       - Defined acceptance criteria
       - Test coverage requirements
       - Performance benchmarks
   ```

# CODEBASE ANALYSIS PROTOCOL

1. Architecture Review:
   ```yaml
   review_points:
     structure:
       - Directory organisation
       - Component relationships
       - Design patterns used
     
     dependencies:
       - External libraries
       - Internal modules
       - Service integrations
     
     database:
       - Schema design
       - Entity relationships
       - Migration history
   ```

2. Code Quality Assessment:
   ```yaml
   assessment_areas:
     patterns:
       - Code consistency
       - Naming conventions
       - Architecture patterns
     
     complexity:
       - Cyclomatic complexity
       - Method lengths
       - Class responsibilities
     
     maintainability:
       - Documentation quality
       - Code modularity
       - Test coverage
   ```

# TESTING AND VALIDATION

1. Test Coverage Analysis:
   ```yaml
   coverage_checks:
     unit_tests:
       - Component isolation
       - Edge cases
       - Error handling
     
     integration_tests:
       - Component interaction
       - Data flow
       - API contracts
     
     e2e_tests:
       - User workflows
       - System integration
       - Performance metrics
   ```

2. Quality Metrics:
   ```yaml
   metrics:
     code_quality:
       - Static analysis results
       - Linting violations
       - Complexity scores
     
     performance:
       - Response times
       - Resource usage
       - Bottlenecks
     
     security:
       - Vulnerability scan
       - Authentication review
       - Authorization checks
   ```

# DOCUMENTATION REVIEW

1. Technical Documentation:
   ```yaml
   review_areas:
     architecture:
       - System design docs
       - Component interactions
       - Technical decisions
     
     api:
       - Endpoint documentation
       - Data models
       - Integration guides
     
     deployment:
       - Environment setup
       - Configuration management
       - Deployment procedures
   ```

2. Knowledge Base Assessment:
   ```yaml
   assessment:
     completeness:
       - Setup instructions
       - Troubleshooting guides
       - API references
     
     accuracy:
       - Version alignment
       - Configuration examples
       - Error resolution steps
   ```

# ISSUE TRACKING AND REPORTING

1. Issue Documentation:
   ```yaml
   tracking_points:
     bugs:
       - Reproduction steps
       - Impact assessment
       - Priority level
     
     improvements:
       - Performance optimisations
       - Code refactoring
       - Technical debt
     
     security:
       - Vulnerability details
       - Risk assessment
       - Mitigation steps
   ```

2. Quality Report Generation:
   ```yaml
   report_sections:
     overview:
       - Executive summary
       - Key findings
       - Risk assessment
     
     details:
       - Technical analysis
       - Test results
       - Performance metrics
     
     recommendations:
       - Immediate actions
       - Long-term improvements
       - Resource requirements
   ```

# TRACKING INTEGRATION

1. Update Project Tracking:
   ```yaml
   updates:
     progress:
       - QA phase status
       - Issue resolution
       - Quality metrics
     
     decisions:
       - Technical choices
       - Architecture changes
       - Tool selections
   ```

2. Knowledge Transfer:
   ```yaml
   transfer_points:
     findings:
       - Quality assessment
       - Issue details
       - Resolution paths
     
     documentation:
       - Updated guides
       - New procedures
       - Best practices
   ```

This prompt ensures:
- Comprehensive quality assessment
- Deep contextual understanding
- Systematic issue tracking
- Clear documentation
- Integrated project tracking

Use in conjunction with:
- project-01-setup-tracking-structure.prompt
- project-02-setup-cursorrules.prompt
- project-03-resume-development.prompt 