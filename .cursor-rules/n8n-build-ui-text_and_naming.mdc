---
description: n8n node, Standards for text writing and naming conventions in n8n node development. [text, naming, language, conventions]
globs: 
alwaysApply: false
---
---
description: n8n node, Standards for text writing and naming conventions in n8n node development. [text, naming, language, conventions]
globs: 
---
# n8n Node Text and Naming Standards

1. Text and Language Standards
   ```typescript
   // Use clear, simple language
   description: INodeTypeDescription = {
     displayName: 'Email',           // Not: 'Email Node'
     name: 'emailNode',
     description: 'Send emails using SMTP', // Clear, concise description
     defaults: {
       name: 'Send Email',          // Action-oriented name
     },
     // Use consistent terminology
     subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
   };
   ```

2. Language Guidelines
   - Use GUI terms over API terms (include API terms in hints if needed)
   - Avoid technical jargon when simpler alternatives exist
   - Be consistent with terminology (e.g., use either 'directory' or 'folder', not both)
   - Use clear, action-oriented descriptions
   - Keep descriptions concise but informative
   - Use sentence case for all text
   - Use active voice for descriptions

3. Node Naming Conventions
   ```typescript
   // Trigger node naming
   description: INodeTypeDescription = {
     displayName: 'Shopify Trigger',  // Correct
     // Not: 'ShopifyTrigger' or 'Shopify trigger'
     
     // Regular node naming
     displayName: 'Asana',            // Correct
     // Not: 'Asana Node' or 'Asana node'
   };
   ```

4. Field Naming Conventions
   ```typescript
   // Field naming examples
   {
     displayName: 'Email (Primary)',    // Grouped related fields with qualifier
     name: 'primaryEmail',             // camelCase for internal names
   },
   {
     displayName: 'Due Date',          // Clear, standard terminology
     name: 'dueDate',
   },
   {
     displayName: 'Workspace Name or ID', // Standard format for ID fields
     name: 'workspaceId',
   }
   ```

5. Description Writing
   ```typescript
   // Good description examples
   {
     displayName: 'Operation',
     description: 'Action to perform on the task',  // Clear, concise
   },
   {
     displayName: 'Simplify Output',
     description: 'Whether to return a simplified version of the response', // Starts with "Whether to" for toggles
   },
   {
     displayName: 'Fields',
     description: 'Fields to update in the task', // Direct, action-oriented
   }
   ```

6. Text Writing
   - Use clear, simple language
   - Avoid technical jargon
   - Be consistent with terminology
   - Use GUI terms over API terms
   - Keep descriptions concise
   - Use active voice
   - Follow sentence case

7. Naming Patterns
   - Use consistent capitalisation
   - Group related fields with prefixes
   - Use clear, descriptive names
   - Follow platform conventions
   - Keep names concise but clear

8. Description Standards
   - Start toggle descriptions with "Whether to"
   - Use action verbs for operations
   - Include defaults in descriptions
   - Explain technical terms
   - Reference documentation when needed

9. Terminology Consistency
   - Maintain a terminology glossary
   - Use standard industry terms
   - Keep API terms in hints
   - Use consistent verbs
   - Follow platform conventions

## Dependencies
[n8n-build-ui-design_standards.mdc](mdc:.cursor/rules/n8n-build-ui-design_standards.mdc)