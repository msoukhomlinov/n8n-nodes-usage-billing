Analyze or implement n8n built-in methods following these guidelines:

Built-in Methods Overview:
1. Data Access Methods:
   Inline Expressions:
   - $("NodeName") - Access other nodes
   - $input - Current input data
   - $json - Current item data
   - $binary - Binary data access
   - $itemIndex - Current item index

   Code Node:
   - $input.all() - Get all items
   - $input.first() - Get first item
   - $input.last() - Get last item
   - $input.item - Current item
   - $input.params - Node parameters

2. Workflow Context:
   Global Variables:
   - $workflow - Workflow metadata
   - $execution - Execution details
   - $vars - Global variables
   - $now - Current timestamp
   - $today - Current date

   Environment:
   - $env - Environment variables
   - $parameters - Workflow parameters
   - $position - Node position
   - $runIndex - Execution index
   - $mode - Execution mode

3. Helper Functions:
   String Manipulation:
   ```javascript
   // Inline Expression
   {{ $json.text.toLowerCase() }}
   {{ $json.email.isEmail() }}
   {{ "hello".toUpperCase() }}

   // Code Node
   item.json.text.toLowerCase();
   item.json.email.includes('@');
   "hello".toUpperCase();
   ```

   Array Operations:
   ```javascript
   // Inline Expression
   {{ $json.numbers.sum() }}
   {{ $json.items.length }}
   {{ ["a", "b"].join(",") }}

   // Code Node
   const sum = items.reduce((acc, val) => acc + val, 0);
   items.length;
   ["a", "b"].join(",");
   ```

4. Type-Specific Methods:
   String Methods:
   - .toLowerCase()
   - .toUpperCase()
   - .trim()
   - .split()
   - .replace()
   - .match()
   - .includes()
   - .substring()

   Number Methods:
   - .toString()
   - .toFixed()
   - .toPrecision()
   - .toLocaleString()
   - Math functions

   Array Methods:
   - .length
   - .join()
   - .map()
   - .filter()
   - .reduce()
   - .sort()
   - .slice()
   - .indexOf()

5. Utility Functions:
   Date & Time:
   ```javascript
   // Inline Expression
   {{ $now.toISOString() }}
   {{ $today.format("YYYY-MM-DD") }}

   // Code Node
   const now = new Date();
   now.toISOString();
   ```

   Type Conversion:
   ```javascript
   // Inline Expression
   {{ $json.number.toString() }}
   {{ "123".toInt() }}
   {{ "true".toBoolean() }}

   // Code Node
   Number(item.json.string);
   Boolean(item.json.value);
   String(item.json.number);
   ```

6. Conditional Functions:
   ```javascript
   // Inline Expression
   {{ $if(condition, trueValue, falseValue) }}
   {{ $ifEmpty(value, defaultValue) }}

   // Code Node
   condition ? trueValue : falseValue;
   value || defaultValue;
   ```

7. Data Transformation:
   ```javascript
   // Inline Expression
   {{ $json.data.transform((item) => item.id) }}
   {{ $json.items.map((item) => item.value).sum() }}

   // Code Node
   items.map(item => ({
     json: {
       id: item.json.id,
       value: processValue(item.json.value)
     }
   }));
   ```

8. Error Handling:
   ```javascript
   // Inline Expression
   {{ $ifEmpty($json.value, "default") }}
   {{ $try(() => riskyOperation(), "fallback") }}

   // Code Node
   try {
     // risky operation
   } catch (error) {
     // handle error
   }
   ```

9. Binary Data:
   ```javascript
   // Inline Expression
   {{ $binary.data }}
   {{ $binary.mimeType }}

   // Code Node
   item.binary.data;
   item.binary.mimeType;
   ```

10. Custom Functions:
    Code Node Only:
    ```javascript
    function customHelper(data) {
      // implementation
    }

    // Usage
    items.map(item => customHelper(item.json));
    ```

Example Usage Patterns:
1. Data Processing:
   ```javascript
   // Inline Expression
   {{ $json.items
        .filter(item => item.active)
        .map(item => item.value)
        .sum() }}

   // Code Node
   const processedItems = items
     .filter(item => item.json.active)
     .map(item => ({
       json: {
         value: item.json.value,
         processed: true
       }
     }));
   ```

2. Complex Transformations:
   ```javascript
   // Inline Expression
   {{ $json.data
        .transform(item => item.name)
        .join(", ")
        .toUpperCase() }}

   // Code Node
   const transformed = items.reduce((acc, item) => {
     acc[item.json.id] = processItem(item.json);
     return acc;
   }, {});
   ```

The implementation should use built-in methods appropriately for: 