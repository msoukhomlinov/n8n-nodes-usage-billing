---
description: n8n node, Standards for organizing files and directories in n8n node development, based on official documentation. [structure, organization, files]
globs: 
alwaysApply: false
---
---
description: n8n node, Standards for organizing files and directories in n8n node development, based on official documentation. [structure, organization, files]
globs: 
---
# n8n Node File Structure Standards

1. Modular Structure (Recommended)
   ```
   my-n8n-nodes/
   ├── credentials/               # Credentials
   │   └── MyNode.credentials.ts
   └── nodes/
      └── MyNode/
         ├── package.json         # Required npm package file
         ├── MyNode.node.ts      # Base file
         ├── MyNode.node.json    # Recommended codex file
         ├── actions/            # Resource operations
         │   └── tasks/
         │       ├── index.ts    # Resource description
         │       ├── create.operation.ts
         │       └── update.operation.ts
         ├── methods/            # Dynamic parameters
         │   ├── loadOptions.ts
         │   └── validateFields.ts
         └── transport/          # API communication
               ├── api.ts
               └── requestHelper.ts
   ```

5. Operation File Structure
   ```typescript
   // tasks/create.operation.ts
   import { INodeProperties } from 'n8n-workflow';

   export const description: INodeProperties = {
     displayName: 'Create Task',
     name: 'create',
     type: 'options',
     default: '',
   };

   export async function execute(this: IExecuteFunctions) {
     // Operation implementation
   }
   ```

6. File Organization
   - Use modular structure for complex nodes
   - Keep related code together
   - Follow consistent naming
   - Maintain clear hierarchy
   - Document file purposes

7. Code Separation
   - Split by resource type
   - Separate operations logic
   - Isolate API transport
   - Group helper methods
   - Maintain single responsibility

8. Version Management
   - Use clear version directories
   - Maintain shared code
   - Document version differences
   - Follow upgrade paths
   - Keep backwards compatibility

9. Package Structure
   - Choose appropriate packaging
   - Group related nodes
   - Share common code
   - Maintain independence
   - Document relationships

## Dependencies
[n8n-build-code_standards.mdc](mdc:.cursor/rules/n8n-build-code_standards.mdc)
[n8n-build-versioning_standards.mdc](mdc:.cursor/rules/n8n-build-versioning_standards.mdc)
