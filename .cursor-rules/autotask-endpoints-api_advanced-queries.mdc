---
description: advanced filtering, query optimisation, complex searches;Learn how to construct optimised complex queries with advanced filtering and search capabilities
globs: 
alwaysApply: false
---
---
description: advanced filtering, query optimisation, complex searches;Learn how to construct optimised complex queries with advanced filtering and search capabilities
globs:
---

# Advanced Query Features

## Query Optimisation Techniques

### Field Selection
- Use `includeFields` to specify required fields only:
```json
{
    "filter": [
        {"op": "eq", "field": "status", "value": 1}
    ],
    "includeFields": ["id", "name", "status", "priority"]
}
```

### Pagination Control
- Use `MaxRecords` to limit result set size
- Implement cursor-based pagination for large datasets:
```json
{
    "filter": [
        {"op": "gt", "field": "id", "value": "last_seen_id"}
    ],
    "MaxRecords": 100
}
```

## Advanced Filtering

### Multiple Value Filtering
- Use `in` and `notin` operators for multiple values:
```json
{
    "filter": [
        {
            "op": "in",
            "field": "status",
            "value": [1, 2, 3, 4]
        }
    ]
}
```

### Pattern Matching
- Use `like` and `notlike` with wildcards:
```json
{
    "filter": [
        {
            "op": "like",
            "field": "email",
            "value": "%@example.com"
        }
    ]
}
```

### Date Range Queries
- Use ISO 8601 format for dates
- Combine multiple date conditions:
```json
{
    "filter": [
        {
            "op": "and",
            "items": [
                {"op": "gte", "field": "createDate", "value": "2024-01-01T00:00:00Z"},
                {"op": "lt", "field": "createDate", "value": "2024-02-01T00:00:00Z"}
            ]
        }
    ]
}
```

## Performance Considerations

### Query Optimisation Rules
1. Limit result sets using `MaxRecords`
2. Use specific field selection
3. Apply filters in order of selectivity
4. Break complex queries into smaller chunks
5. Use indexed fields where possible

### Resource Usage
- Maximum 500 OR conditions per query
- GET description: autotask rest api, limited to 2048 characters
- Maximum 3 levels of nested conditions
- Rate limits apply based on API subscription

## Advanced Use Cases

### Hierarchical Data Queries
Query parent-child relationships:
```json
{
    "filter": [
        {
            "op": "and",
            "items": [
                {"op": "eq", "field": "parentAccountID", "value": 12345},
                {"op": "eq", "field": "isActive", "value": true}
            ]
        }
    ],
    "includeFields": ["id", "name", "parentAccountID"]
}
```

### Complex Status Tracking
Track items across multiple states:
```json
{
    "filter": [
        {
            "op": "or",
            "items": [
                {
                    "op": "and",
                    "items": [
                        {"op": "eq", "field": "status", "value": 1},
                        {"op": "gt", "field": "priority", "value": 2}
                    ]
                },
                {
                    "op": "and",
                    "items": [
                        {"op": "in", "field": "status", "value": [2, 3]},
                        {"op": "eq", "field": "isUrgent", "value": true}
                    ]
                }
            ]
        }
    ]
}
```

See related files:
[autotask-endpoints-api_query-operations.mdc](mdc:.cursor/rules/autotask-endpoints-api_query-operations.mdc)
[autotask-endpoints-api_query-grouping.mdc](mdc:.cursor/rules/autotask-endpoints-api_query-grouping.mdc)
[autotask-endpoints-api_filter-operators.mdc](mdc:.cursor/rules/autotask-endpoints-api_filter-operators.mdc)
