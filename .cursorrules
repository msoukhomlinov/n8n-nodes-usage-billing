# General Rules
- Use Australian English spelling and conventions
- When trying to run commands (Agent or Compose), remember that you are on Windows with PowerShell Core

# MCP Rules
Search the web using Brave web search using the MCP tool first to see what people are saying before fixing anything that could be quite technical.
Use Code and Issue Researcher to assist with the following to enhance insight and learn the latest information/fixes:
Sequential thinking - for all tasks
Puppeteer - web browsing or web scraping
Server memory - for storing and refrerencing key information across moderate to complex work

For code indentation, uou must use spaces instead of tabs
# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Documentation Files

# MCP Server Tools Usage

## Strategic Tool Selection

- **Sequential Thinking:**
  - Use for multi-step operations requiring careful planning.
  - Maintain operational context to enable course correction.
  - Begin with a higher number of total thoughts (e.g. 8–12) for complex tasks.
  - Use branching to explore alternative approaches and mark revisions when needed.
  - Set `needsMoreThoughts=true` when new complexities arise.

- **Web Research (via Brave Search):**
  - Always conduct initial broad searches, then follow with detailed research.
  - Validate technical approaches, error handling strategies, and best practices.
  - Cross-reference multiple reputable sources before implementation.

- **Puppeteer Operations:**
  - Use for intricate web interactions and testing.
  - Implement chained operations with robust error handling, waits, and retries.
  - Optimise memory by closing pages when done and reusing browser instances.

- **Server Memory (Knowledge Graph):**
  - Maintain complex relationships and operational context.
  - Create entities for major components and concepts.
  - Map dependencies and document architectural decisions.
  - Regularly clean up obsolete entities and update relationships.

### Sequential Thinking
- Use for operations requiring multiple steps
- Essential for maintaining operational context
- Helps break down large changes into manageable chunks
- Enables course correction and revision of approach
- Key usage patterns:
  * Start with higher total_thoughts for complex tasks (8-12)
  * Use branching for exploring alternative approaches
  * Mark revisions when changing previous decisions
  * Set needsMoreThoughts=true when discovering new complexity
  * Use as tactical memory during long operations

### Web Research (Brave Search)
- Always search before implementing complex features
- Research patterns:
  * Start with broad concept search
  * Follow up with specific implementation details
  * Look for recent discussions and solutions
  * Cross-reference multiple sources
  * Use for validating approach before major changes
- Key usage:
  * Technical implementation patterns
  * Error handling strategies
  * Best practices validation
  * Community solutions to similar problems

### Puppeteer Operations
- Use for complex web interactions and testing
- Strategic patterns:
  * Chain operations with proper error handling
  * Use screenshots for validation points
  * Implement waits and retries for stability
  * Maintain session context across operations
- Memory management:
  * Close pages when done
  * Reuse browser instances when possible
  * Clear large objects after operations
  * Monitor memory usage in long sessions

## Operational Guidelines

### For Moderate Changes (30-100 lines):
1. Start with sequential thinking (5-8 thoughts)
2. Research similar implementations
3. Plan key validation points
4. Execute with regular state checks

### For Large Changes (100+ lines):
1. Begin with comprehensive sequential thinking (10+ thoughts)
2. Extensive research phase
3. Break into sub-operations
4. Regular validation checkpoints
5. Maintain operational memory through scratchpad


# Lessons

# Scratchpad

## n8n-nodes-billing-calculator Project - Project Phases Progress

### Completed Phases

#### Phase 1: Core Framework ✅
- [X] Implemented basic node structure
- [X] Created two operations: Process Billing and Validate Configuration
- [X] Implemented schema inference from examples
- [X] Created simple matching engine
- [X] Implemented basic validation
- [X] Fixed linter errors
- [X] Addressed import path issues with interfaces

#### Phase 2: Enhanced User Experience ✅
- [X] Created ResourceMapperUtils.ts for resource mapper functionality
- [X] Enhanced SchemaInterfaces.ts with new interface types
- [X] Updated BillingCalculator.node.ts with improved match configuration
- [X] Added output field mapping with multiple source types
- [X] Implemented schema visualization
- [X] Enhanced validation feedback with different severity levels
- [X] Addressed linter errors and execution context issues

### Next Phase

#### Phase 3: Advanced Features (Upcoming)
- [ ] Implement multi-key matching
- [ ] Add custom calculation formulas
- [ ] Optimize batch processing for large datasets
- [ ] Create debugging tools
- [ ] Add comprehensive documentation
- [ ] Create test workflows with samples

### Implementation Notes

1. **Resource Mapper Implementation:**
   - Used `fixedCollection` parameter with custom UI for visual mapping
   - Adapted output fields to support multiple source types
   - Created utility functions to convert between schemas and resource mapper options

2. **Schema Visualization:**
   - Implemented a standalone function for schema visualization
   - Added highlighting for match fields
   - Integrated visualization with validation output

3. **Enhanced Validation:**
   - Created interfaces for warnings and errors with severity levels
   - Added field-level validation
   - Improved error messages with specific context

4. **Next Steps:**
   - Test the node with real-world examples
   - Gather feedback on UX improvements
   - Begin planning for Phase 3 features
