---
description: update,resource,PUT;Learn how to update Autotask resources using PUT description: autotask rest api, with proper field handling
globs: 
alwaysApply: false
---
---
description: update,resource,PUT;Learn how to update Autotask resources using PUT description: autotask rest api, with proper field handling
---

# Updating Resources with PUT Operations

## Overview

PUT description: autotask rest api, in the Autotask REST API are used to update existing entities. This operation replaces all properties of the target resource, with important considerations for field handling.

> **Important**: PUT operations will set any writable fields not included in the request to `null`. This differs from PATCH operations which only update specified fields.

## Request Format

### Base URL
```
https://webservices[n].autotask.net/atservicesrest/v1.0/{resourceType}
```

### Headers
- Content-Type: application/json
- Authorization: (Required authentication headers)

### Request Body
The request body must contain:
- `id`: The unique identifier of the resource to update
- All required fields for the resource
- Any optional fields that should retain values

## Examples

### Basic Resource Update
```json
PUT /atservicesrest/v1.0/ContactGroups
{
    "id": "4",
    "Name": "Test Group Name",
    "IsActive": true
}
```

### Update with User-Defined Fields (UDF)
```json
PUT /atservicesrest/v1.0/Companies
{
    "id": 283,
    "companyName": "AB Company",
    "companyType": 1,
    "ownerResourceID": 4,
    "phone": "5555555555",
    "userDefinedFields": [
        {
            "name": "CustomerRanking",
            "value": "almost Golden"
        }
    ]
}
```

## Response Handling

### Success Response
- Status Code: 200
- Response Body Example:
```json
{
    "itemId": 4
}
```

### Error Responses
- Status Code: 500 or 400-series
- Response Body Example:
```json
{
    "errors": [
        "A ContactGroup already exists with Name [Test Group]. ContactGroup names must be unique."
    ]
}
```

## Best Practices

1. Always include all required fields in PUT description: autotask rest api,
2. Cache existing resource data before updates
3. Handle all possible response status codes
4. Implement proper error handling for failed description: autotask rest api,
5. Validate data before sending updates

## Related Documentation
[autotask-endpoints-api_patch-operations.mdc](mdc:.cursor/rules/autotask-endpoints-api_patch-operations.mdc)
[autotask-auth-api_authentication.mdc](mdc:.cursor/rules/autotask-auth-api_authentication.mdc)
