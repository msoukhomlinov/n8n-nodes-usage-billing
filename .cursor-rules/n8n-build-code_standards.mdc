---
description: n8n node, n8n node, Core code standards and best practices for n8n node development. [code standards, typescript, linting, patterns]
globs: 
alwaysApply: false
---
---
description: n8n node, n8n node, Core code standards and best practices for n8n node development. [code standards, typescript, linting, patterns]
globs: 
---
# n8n Node Code Standards

1. TypeScript Usage
   ```typescript
   // Always use TypeScript with proper types
   export class ExampleNode implements INodeType {
     description: INodeTypeDescription = {
       displayName: 'Example Node',
       name: 'exampleNode',
       group: ['transform'],
       version: 1,
       description: 'Basic example node',
       defaults: {
         name: 'Example',
       },
       inputs: ['main'],
       outputs: ['main'],
     };
   }
   ```

2. Resource and Operation Structure
   ```typescript
   // Standard resource and operation setup
   {
     displayName: 'Resource',
     name: 'resource',
     type: 'options',
     noDataExpression: true,
     options: [
       {
         name: 'Order',
         value: 'order',
       }
     ],
     default: 'order',
   },
   {
     displayName: 'Operation',
     name: 'operation',
     type: 'options',
     displayOptions: {
       show: {
         resource: [
           'order'
         ]
       }
     },
     options: [
       {
         name: 'Create',
         value: 'create',
         description: 'Create a new order',
       }
     ],
   }
   ```

3. Parameter Name Reuse
   ```typescript
   // Reuse internal names across operations
   {
     displayName: 'Order ID',
     name: 'orderId',  // Same internal name for all operations
     type: 'string',
     required: true,
     displayOptions: {
       show: {
         operation: [
           'get',
           'update',
           'delete'
         ]
       }
     },
     default: '',
   }
   ```

4. HTTP Request Handling
   ```typescript
   // Use built-in request helpers
   async execute() {
     // Without auth
     const response = await this.helpers.httpRequest({
       url: 'https://api.example.com/data',
       method: 'GET',
     });

     // With auth
     const response = await this.helpers.httpRequestWithAuthentication.call(
       this,
       'exampleApi',
       {
         url: 'https://api.example.com/data',
         method: 'GET',
       },
     );
   }
   ```

5. Data Immutability
   ```typescript
   // Never modify incoming data directly
   async execute() {
     const items = this.getInputData();
     
     // Clone and modify instead of changing original
     const newItems = items.map(item => ({
       ...item,
       json: {
         ...item.json,
         modified: true,
       },
     }));

     return newItems;
   }
   ```

6. Code Structure
   - Use TypeScript consistently
   - Follow linting rules
   - Keep code modular
   - Use clear naming
   - Document complex logic

7. Resource Handling
   - Use standard resource/operation pattern
   - Reuse parameter names
   - Group related operations
   - Provide clear descriptions
   - Handle all resource types

8. Data Processing
   - Keep data immutable
   - Clone before modifying
   - Handle errors gracefully
   - Validate inputs
   - Document data flow

9. HTTP Requests
   - Use built-in helpers
   - Handle rate limits
   - Implement proper auth
   - Handle errors
   - Log responses 

## Dependencies
[n8n_general-naming_conventions.mdc](mdc:.cursor/rules/n8n_general-naming_conventions.mdc)
[n8n-build-ui-error_handling.mdc](mdc:.cursor/rules/n8n-build-ui-error_handling.mdc)
