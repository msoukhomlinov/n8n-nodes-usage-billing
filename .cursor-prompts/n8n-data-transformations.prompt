Analyze or implement n8n data transformation functions following these guidelines:

1. String Transformations:
   Basic Operations:
   ```javascript
   {{ "hello world".toUpperCase() }}      // -> "HELLO WORLD"
   {{ "HELLO".toLowerCase() }}            // -> "hello"
   {{ "  text  ".trim() }}               // -> "text"
   {{ "a,b,c".split(",") }}              // -> ["a", "b", "c"]
   {{ ["a", "b"].join("-") }}            // -> "a-b"
   ```

   Advanced String Operations:
   ```javascript
   {{ "email@domain.com".isEmail() }}     // -> true
   {{ "https://n8n.io".extractDomain() }} // -> "n8n.io"
   {{ "snake_case".toCamelCase() }}       // -> "snakeCase"
   {{ "camelCase".toSnakeCase() }}        // -> "camel_case"
   {{ "text".padStart(5, "0") }}          // -> "00text"
   ```

2. Number Transformations:
   Basic Math:
   ```javascript
   {{ 123.456.round() }}                  // -> 123
   {{ 123.456.floor() }}                  // -> 123
   {{ 123.456.ceil() }}                   // -> 124
   {{ 123.456.toFixed(2) }}              // -> "123.46"
   ```

   Number Operations:
   ```javascript
   {{ 42.isEven() }}                      // -> true
   {{ 123.toString() }}                   // -> "123"
   {{ "123".toInt() }}                    // -> 123
   {{ "123.45".toFloat() }}              // -> 123.45
   {{ 1234.format() }}                    // -> "1,234"
   ```

3. Array Transformations:
   Basic Operations:
   ```javascript
   {{ [1,2,3].length }}                   // -> 3
   {{ [1,2,2,3].unique() }}              // -> [1,2,3]
   {{ [1,2,3].includes(2) }}             // -> true
   {{ [1,2,3].indexOf(2) }}              // -> 1
   {{ [1,2,3].reverse() }}               // -> [3,2,1]
   ```

   Array Calculations:
   ```javascript
   {{ [1,2,3].sum() }}                    // -> 6
   {{ [1,2,3].average() }}                // -> 2
   {{ [1,2,3].min() }}                    // -> 1
   {{ [1,2,3].max() }}                    // -> 3
   {{ [1,2,3].randomItem() }}             // -> random element
   ```

4. Object Transformations:
   Basic Operations:
   ```javascript
   {{ $json.isEmpty() }}                  // Check if empty
   {{ $json.hasField("key") }}           // Check field exists
   {{ $json.removeField("key") }}        // Remove field
   {{ $json.keepFields(["id", "name"]) }} // Keep only specified fields
   ```

   Object Manipulation:
   ```javascript
   {{ $json.merge(otherObject) }}        // Merge objects
   {{ $json.clean() }}                   // Remove null/undefined
   {{ $json.compact() }}                 // Remove empty values
   {{ $json.flatten() }}                 // Flatten nested object
   ```

5. Date Transformations:
   Basic Operations:
   ```javascript
   {{ $now.format("YYYY-MM-DD") }}       // Format date
   {{ $today.addDays(7) }}               // Add days
   {{ $now.subtractHours(2) }}           // Subtract hours
   {{ "2023-01-01".toDateTime() }}       // Parse date string
   ```

   Date Checks:
   ```javascript
   {{ $now.isWeekend() }}                // Check if weekend
   {{ $now.isToday() }}                  // Check if today
   {{ $now.isFuture() }}                 // Check if future
   {{ $now.diff("2023-01-01", "days") }} // Get difference
   ```

6. Type Conversions:
   Basic Conversions:
   ```javascript
   {{ 123.toString() }}                  // To string
   {{ "123".toNumber() }}                // To number
   {{ 1.toBoolean() }}                   // To boolean
   {{ object.toJSON() }}                 // To JSON string
   {{ jsonString.parseJSON() }}          // Parse JSON
   ```

7. Conditional Transformations:
   ```javascript
   {{ $if(condition, trueValue, falseValue) }}
   {{ $ifEmpty(value, defaultValue) }}
   {{ $switch(value, {
        case1: result1,
        case2: result2,
        default: defaultResult
      }) }}
   ```

8. Complex Transformations:
   Data Processing:
   ```javascript
   {{ $json.items
        .filter(item => item.active)
        .map(item => item.name)
        .unique()
        .join(", ")
        .toUpperCase() }}
   ```

   Object Processing:
   ```javascript
   {{ $json.users
        .groupBy("department")
        .map(group => ({
          department: group[0].department,
          count: group.length,
          total: group.sum("salary")
        })) }}
   ```

9. Custom Functions:
   ```javascript
   {{ $formatCurrency(amount, currency) }}
   {{ $formatDate(date, format) }}
   {{ $calculateTotal(items, field) }}
   {{ $generateSlug(text) }}
   ```

10. Best Practices:
    - Chain transformations efficiently
    - Handle null/undefined values
    - Use appropriate type conversions
    - Consider performance impact
    - Document complex transformations

Example Usage Patterns:
```javascript
// Data cleaning and formatting
{{ $json.data
     .filter(item => item.price > 0)
     .map(item => ({
       id: item.id,
       name: item.name.trim().toLowerCase(),
       price: item.price.toFixed(2),
       date: item.date.format("YYYY-MM-DD")
     }))
     .sortBy("price") }}

// Complex calculations
{{ $json.orders
     .groupBy("category")
     .map(group => ({
       category: group[0].category,
       total: group.sum("amount").toFixed(2),
       count: group.length,
       average: group.average("amount").round(2),
       dates: group.map(o => o.date.format("YYYY-MM-DD")).join(", ")
     })) }}
```

The transformation implementation should: 