---
description: n8n node, Standards for organising and structuring fields in n8n node development, including field ordering, grouping, and visibility rules. [fields, organisation, structure, visibility]
globs: 
alwaysApply: false
---
---
description: n8n node, Standards for organising and structuring fields in n8n node development, including field ordering, grouping, and visibility rules. [fields, organisation, structure, visibility]
globs: 
---
# n8n Node Field Organisation Standards

1. Field Ordering
   ```typescript
   // Standard field order
   properties: [
     // 1. Credentials (automatically displayed at top)
     
     // 2. Resource and Operation (when applicable)
     {
       displayName: 'Resource',
       name: 'resource',
       type: 'options',
       required: true,
       noDataExpression: true,
     },
     {
       displayName: 'Operation',
       name: 'operation',
       type: 'options',
       required: true,
       noDataExpression: true,
     },

     // 3. Required Fields (ordered by importance and scope)
     {
       displayName: 'Document',    // Broader scope first
       name: 'document',
       type: 'string',
       required: true,
     },
     {
       displayName: 'Page',        // Then narrower scope
       name: 'page',
       type: 'string',
       required: true,
     }
   ]
   ```

2. Optional Fields Organisation
   ```typescript
   // Optional fields in collapsible section
   {
     displayName: 'Additional Fields',
     name: 'additionalFields',
     type: 'collection',
     placeholder: 'Add Field',
     default: {},
     options: [
       // Alphabetically ordered or grouped by theme
       {
         displayName: 'Email (Primary)',    // Grouped related fields
         name: 'primaryEmail',
         type: 'string',
       },
       {
         displayName: 'Email (Secondary)',
         name: 'secondaryEmail',
         type: 'string',
       }
     ]
   }
   ```

3. Progressive Disclosure
   ```typescript
   // Show dependent fields only when needed
   {
     displayName: 'Filter by Date',
     name: 'filterByDate',
     type: 'boolean',
     default: false,
   },
   {
     displayName: 'Date to Filter By',
     name: 'filterDate',
     type: 'dateTime',
     displayOptions: {
       show: {
         filterByDate: [true]
       }
     }
   }
   ```

4. Field Grouping
   ```typescript
   // Group related fields under a single option
   {
     displayName: 'Time Settings',
     name: 'timeSettings',
     type: 'collection',
     placeholder: 'Add Time Setting',
     options: [
       {
         displayName: 'Due Date',
         name: 'dueDate',
         type: 'dateTime',
       },
       {
         displayName: 'Reminder',
         name: 'reminder',
         type: 'boolean',
       }
     ],
   }
   ```

5. Visibility Rules
   ```typescript
   // Control field visibility based on conditions
   {
     displayName: 'Advanced Options',
     name: 'advancedOptions',
     type: 'collection',
     displayOptions: {
       show: {
         operation: [
           'create',
           'update'
         ],
         resource: [
           'task'
         ]
       },
       hide: {
         mode: [
           'simple'
         ]
       }
     }
   }
   ```

6. Field Order
   - Credentials always first (automatic)
   - Resource and Operation next (if applicable)
   - Required fields by importance
   - Optional fields in collections
   - Related fields grouped together

7. Progressive Disclosure
   - Hide dependent fields initially
   - Show fields based on conditions
   - Group related options together
   - Use clear visibility rules
   - Maintain logical flow

8. Optional Fields
   - Group by theme or function
   - Order alphabetically within groups
   - Use clear group names
   - Provide meaningful defaults
   - Include helpful descriptions

9. Field Dependencies
   - Use clear dependency chains
   - Avoid circular dependencies
   - Handle all dependency states
   - Provide clear feedback
   - Document dependencies

10. Field Grouping
    - Use logical groupings
    - Keep groups focused
    - Limit nesting depth
    - Use consistent group patterns
    - Document group purposes

## Dependencies
[n8n-build-ui-design_standards.mdc](mdc:.cursor/rules/n8n-build-ui-design_standards.mdc)
[n8n_general-naming_conventions.mdc](mdc:.cursor/rules/n8n_general-naming_conventions.mdc)

