---
description: n8n node, Common UI patterns and implementations for n8n node development, including standard solutions for common requirements. [patterns, implementations, standards, common solutions]
globs: 
alwaysApply: false
---
---
description: n8n node, Common UI patterns and implementations for n8n node development, including standard solutions for common requirements. [patterns, implementations, standards, common solutions]
globs: 
---
# n8n Node Common UI Patterns

1. Simplified Response Pattern
   ```typescript
   // Toggle for simplified API responses
   {
     displayName: 'Simplify Response',
     name: 'simplifyResponse',
     type: 'boolean',
     default: true,
     description: 'Whether to return a simplified version of the response instead of the raw data',
   },

   // Implementation
   if (this.getNodeParameter('simplifyResponse', 0)) {
     return items.map(item => this.simplifyResponse(item));
   }
   ```

2. Upsert Operations
   ```typescript
   // Create or Update operation
   {
     displayName: 'Operation',
     name: 'operation',
     type: 'options',
     options: [
       {
         name: 'Create or Update',
         value: 'upsert',
         description: 'Create a new record, or update if it already exists (upsert)',
       }
     ]
   },

   // Implementation
   async execute() {
     const operation = this.getNodeParameter('operation', 0);
     if (operation === 'upsert') {
       const record = await this.findExisting();
       if (record) {
         return this.update(record);
       }
       return this.create();
     }
   }
   ```

3. Boolean Operations
   ```typescript
   // Avoid complex boolean combinations
   {
     displayName: 'Must Match',
     name: 'matchType',
     type: 'options',
     options: [
       {
         name: 'Any Condition',
         value: 'any',
         description: 'Match if any condition is true',
       },
       {
         name: 'All Conditions',
         value: 'all',
         description: 'Match only if all conditions are true',
       }
     ]
   }
   ```

4. Record Selection
   ```typescript
   // Support both list selection and direct ID input
   {
     displayName: 'Task Name or ID',
     name: 'taskId',
     type: 'string',
     default: '',
     required: true,
     description: 'Choose from the list, or specify an ID using an expression',
     typeOptions: {
       loadOptionsMethod: 'getTasks',
     },
     hint: 'For direct ID input, you can also paste the task URL',
   }
   ```

5. Optional Field Groups
   ```typescript
   // Group related optional fields
   {
     displayName: 'Additional Fields',
     name: 'additionalFields',
     type: 'collection',
     placeholder: 'Add Field',
     default: {},
     options: [
       {
         displayName: 'Category',
         name: 'category',
         type: 'options',
         options: [
           {
             name: 'Work',
             value: 'work',
           }
         ],
       },
       // Group related fields under a single option
       {
         displayName: 'Time Settings',
         name: 'timeSettings',
         type: 'collection',
         placeholder: 'Add Time Setting',
         options: [
           {
             displayName: 'Due Date',
             name: 'dueDate',
             type: 'dateTime',
           },
           {
             displayName: 'Reminder',
             name: 'reminder',
             type: 'boolean',
           }
         ],
       }
     ],
   }
   ```

6. Binary Data References
   ```typescript
   // Use descriptive names for binary properties
   {
     displayName: 'Input Data Field Name',    // Not: 'Binary Property'
     name: 'binaryPropertyName',
     type: 'string',
     default: 'data',
     description: 'Name of the input file data field',
   }
   ```

7. Pagination Handling
   ```typescript
   // Standard pagination implementation
   {
     displayName: 'Return All',
     name: 'returnAll',
     type: 'boolean',
     default: false,
     description: 'Whether to return all results or only up to a given limit',
   },
   {
     displayName: 'Limit',
     name: 'limit',
     type: 'number',
     default: 50,
     description: 'Max number of results to return',
     displayOptions: {
       show: {
         returnAll: [false],
       },
     },
   }
   ```

8. Pattern Selection
   - Use established patterns
   - Keep implementations consistent
   - Document any deviations
   - Consider user expectations
   - Follow platform conventions

9. Implementation
   - Handle edge cases
   - Provide clear documentation
   - Maintain consistency
   - Support common use cases
   - Follow best practices

10. User Experience
    - Use familiar patterns
    - Provide clear guidance
    - Support flexible input
    - Handle errors gracefully
    - Maintain consistency

11. Pattern Adaptation
    - Adapt to specific needs
    - Maintain core functionality
    - Document changes clearly
    - Consider backwards compatibility
    - Test thoroughly

12. Pattern Documentation
    - Document standard usage
    - Explain customisations
    - Provide examples
    - List limitations
    - Include edge cases

## Dependencies
[n8n-build-ui-design_standards.mdc](mdc:.cursor/rules/n8n-build-ui-design_standards.mdc)
[n8n-build-ui-field_organisation.mdc](mdc:.cursor/rules/n8n-build-ui-field_organisation.mdc)
[n8n-build-ui-basic_field_types.mdc](mdc:.cursor/rules/n8n-build-ui-basic_field_types.mdc)
