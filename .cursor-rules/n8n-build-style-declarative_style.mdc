---
description: n8n node, Guidelines for implementing n8n nodes using the declarative style, focusing on configuration-based API integrations and simplified request handling
globs: 
alwaysApply: false
---
---
description: n8n node, Guidelines for implementing n8n nodes using the declarative style, focusing on configuration-based API integrations and simplified request handling
globs: 
---
# n8n Node Declarative Style Implementation

1. Define your node structure with proper INodeType implementation:
  ```typescript
  export class MyApiNode implements INodeType {
    description: INodeTypeDescription = {
      displayName: 'My API',
      name: 'myApi',
      icon: 'file:myapi.svg',
      group: ['transform'],
      version: 1,
      subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
      description: 'Work with My API',
      defaults: {
        name: 'My API',
      },
      requestDefaults: {
        baseURL: 'https://api.example.com/v1',
        headers: {
          'Content-Type': 'application/json',
        },
      },
      properties: [
        // Properties defined below
      ],
    };
  }
  ```

2. Structure resources and operations using clear displayOptions:
  ```typescript
  properties: [
    {
      displayName: 'Resource',
      name: 'resource',
      type: 'options',
      noDataExpression: true,
      options: [
        {
          name: 'Contact',
          value: 'contact',
        },
      ],
      default: 'contact',
    },
    {
      displayName: 'Operation',
      name: 'operation',
      type: 'options',
      displayOptions: {
        show: {
          resource: [
            'contact',
          ],
        },
      },
      options: [
        {
          name: 'Create',
          value: 'create',
          description: 'Create a new contact',
          action: 'Create a contact',
        },
      ],
      default: 'create',
    },
  ]
  ```

3. Configure base request settings:
  ```typescript
  requestDefaults: {
    baseURL: 'https://api.example.com/v1',
    headers: {
      Accept: 'application/json',
    },
    timeout: 10000,
  }
  ```

4. Set up authentication:
  ```typescript
  authenticate: {
    type: 'generic',
    properties: {
      qs: {
        'api_key': '={{$credentials.apiKey}}'
      }
    },
  } as IAuthenticateGeneric
  ```

5. Implement operation routing with proper request/response handling:
  ```typescript
  routing: {
    request: {
      method: 'POST',
      url: '=/contacts',
      send: {
        type: 'body',
        properties: {
          email: '={{$parameter["email"]}}',
          firstName: '={{$parameter["firstName"]}}',
          lastName: '={{$parameter["lastName"]}}',
          // Additional fields
          ...('={{$parameter["additionalFields"]}}'),
        },
      },
      pagination: {
        type: 'offset',
        properties: {
          limitParameter: 'limit',
          offsetParameter: 'offset',
          pageSize: 50,
        },
      },
    },
    output: {
      postReceive: [
        {
          type: 'set',
          properties: {
            value: '={{ { "success": true, "data": $response.body } }}'
          }
        }
      ]
    }
  }
  ```

6. Define parameters with proper configuration:
  ```typescript
  {
    displayName: 'Email',
    name: 'email',
    type: 'string',
    required: true,
    default: '',
    displayOptions: {
      show: {
        resource: ['contact'],
        operation: ['create'],
      },
    },
    routing: {
      send: {
        type: 'body',
        property: 'email',
      },
    },
  },
  {
    displayName: 'Additional Fields',
    name: 'additionalFields',
    type: 'collection',
    default: {},
    placeholder: 'Add Field',
    displayOptions: {
      show: {
        resource: ['contact'],
        operation: ['create'],
      },
    },
    options: [
      {
        displayName: 'Phone',
        name: 'phone',
        type: 'string',
        default: '',
      },
    ],
  }
  ```

7. Set up credentials properly:
  ```typescript
  export class MyApiCredentials implements ICredentialType {
    name = 'myApi';
    displayName = 'My API';
    documentationUrl = 'myapi';
    properties: INodeProperties[] = [
      {
        displayName: 'API Key',
        name: 'apiKey',
        type: 'string',
        typeOptions: {
          password: true,
        },
        required: true,
      },
    ];
  }
  ```

8. Include comprehensive node metadata in Codex format:
  ```json
  {
    "node": "n8n-nodes-base.MyApi",
    "nodeVersion": "1.0",
    "codexVersion": "1.0",
    "categories": [
      "Communication"
    ],
    "resources": {
      "credentialDocumentation": [
        {
          "url": "https://docs.myapi.com/authentication"
        }
      ],
      "primaryDocumentation": [
        {
          "url": "https://docs.myapi.com/api"
        }
      ]
    }
  }
  ```

9. Configure package.json with proper structure:
  ```json
  {
    "name": "n8n-nodes-myapi",
    "version": "1.0.0",
    "description": "My API integration for n8n",
    "keywords": [
      "n8n-community-node-package"
    ],
    "n8n": {
      "n8nNodesApiVersion": 1,
      "credentials": [
        "dist/credentials/MyApi.credentials.js"
      ],
      "nodes": [
        "dist/nodes/MyApi/MyApi.node.js"
      ]
    }
  }
  ```

# Best Practices

1. Use descriptive names for resources and operations
2. Implement proper error handling in routing
3. Use pagination where appropriate
4. Keep credentials secure using typeOptions
5. Document all parameters clearly
6. Use proper version control in package.json
7. Include comprehensive metadata in codex file

## Dependencies
[n8n-build-node_implementation.mdc](mdc:.cursor/rules/n8n-build-node_implementation.mdc)
[n8n-build-code_standards.mdc](mdc:.cursor/rules/n8n-build-code_standards.mdc)
[n8n_security-security_standards.mdc](mdc:.cursor/rules/n8n_security-security_standards.mdc)
