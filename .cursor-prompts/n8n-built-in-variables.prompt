Analyze or implement n8n built-in variables and execution metadata following these guidelines:

1. Global Variables:
   Workflow Information:
   ```javascript
   // Workflow metadata
   $workflow.id          // Current workflow ID
   $workflow.name        // Workflow name
   $workflow.active      // Workflow active state
   $workflow.owner       // Workflow owner details
   $workflow.tags        // Workflow tags
   ```

   Execution Context:
   ```javascript
   // Execution details
   $execution.id         // Current execution ID
   $execution.mode      // Manual, webhook, trigger
   $execution.resumeUrl // Resume URL for waiting workflows
   $execution.startedAt // Execution start timestamp
   $execution.retryOf   // Original execution ID if retry
   ```

2. Environment Variables:
   System Context:
   ```javascript
   // Environment access
   $env.NODE_ENV        // Environment name
   $env.WEBHOOK_URL     // Webhook base URL
   $env.PATH            // System path
   $env.CUSTOM_VAR      // Custom environment variables
   ```

   Runtime Variables:
   ```javascript
   // Runtime context
   $vars                // Global variables
   $parameters         // Workflow parameters
   $position          // Node position
   $runIndex          // Current run index
   ```

3. Temporal Variables:
   Date and Time:
   ```javascript
   // Current time
   $now               // Current timestamp
   $today            // Current date
   $moment           // Moment.js instance
   
   // Formatted examples
   {{ $now.toISOString() }}
   {{ $today.format("YYYY-MM-DD") }}
   {{ $moment().subtract(7, 'days') }}
   ```

4. Node Context:
   Node Information:
   ```javascript
   // Node metadata
   $node.id           // Current node ID
   $node.name         // Node name
   $node.type         // Node type
   $node.parameters   // Node parameters
   $node.typeVersion  // Node version
   ```

   Node Relationships:
   ```javascript
   // Connected nodes
   $node.inputs       // Input connections
   $node.outputs      // Output connections
   $node.connected    // Connected node IDs
   ```

5. Data Access:
   Item Context:
   ```javascript
   // Current item data
   $input.item       // Current item
   $input.first()    // First item
   $input.last()     // Last item
   $input.all()      // All items
   $itemIndex        // Current item index
   ```

   Binary Data:
   ```javascript
   // Binary data access
   $binary           // Binary data object
   $binary.data      // Raw binary data
   $binary.mimeType  // MIME type
   $binary.fileName  // File name
   $binary.fileSize  // File size
   ```

6. Static Data:
   Workflow Static Data:
   ```javascript
   // Persistent data
   $execution.getWorkflowStaticData('global')  // Global static data
   $execution.getWorkflowStaticData('node')    // Node-specific data
   
   // Usage example
   const staticData = $execution.getWorkflowStaticData('global');
   staticData.counter = (staticData.counter || 0) + 1;
   $execution.setWorkflowStaticData('global', staticData);
   ```

7. Error Handling:
   Error Context:
   ```javascript
   // Error information
   $error            // Last error object
   $error.message    // Error message
   $error.stack      // Error stack trace
   $error.timestamp  // Error timestamp
   ```

8. Workflow State:
   State Management:
   ```javascript
   // Workflow state
   $workflow.status   // Current status
   $workflow.finished // Completion state
   $workflow.failed   // Error state
   $workflow.waiting  // Waiting state
   ```

9. Usage Examples:
   Basic Usage:
   ```javascript
   // Inline Expression
   {{ $workflow.name + ": " + $execution.id }}
   {{ $now.format("YYYY-MM-DD HH:mm:ss") }}
   {{ $env.WEBHOOK_URL + "/trigger" }}

   // Code Node
   const workflowInfo = {
     name: $workflow.name,
     execution: $execution.id,
     timestamp: $now.toISOString(),
     environment: $env.NODE_ENV
   };
   ```

   Complex Usage:
   ```javascript
   // Combine multiple contexts
   const executionContext = {
     workflow: {
       id: $workflow.id,
       name: $workflow.name,
       owner: $workflow.owner
     },
     execution: {
       id: $execution.id,
       mode: $execution.mode,
       startedAt: $execution.startedAt
     },
     environment: {
       env: $env.NODE_ENV,
       webhookUrl: $env.WEBHOOK_URL
     },
     node: {
       id: $node.id,
       type: $node.type,
       version: $node.typeVersion
     },
     timestamp: $now.toISOString()
   };

   // Log execution context
   console.log('Execution Context:', executionContext);
   ```

10. Best Practices:
    - Always check variable existence before use
    - Use type checking for variable values
    - Handle missing or undefined values
    - Document variable usage
    - Consider environment differences

Example Implementation:
```javascript
// Comprehensive execution logging
function logExecutionContext() {
  try {
    const context = {
      workflow: {
        id: $workflow.id || 'unknown',
        name: $workflow.name || 'unnamed',
        active: $workflow.active || false
      },
      execution: {
        id: $execution.id || 'unknown',
        mode: $execution.mode || 'unknown',
        startedAt: $execution.startedAt || new Date().toISOString()
      },
      environment: {
        nodeEnv: $env.NODE_ENV || 'development',
        webhookUrl: $env.WEBHOOK_URL || 'not-set'
      },
      node: {
        id: $node.id || 'unknown',
        name: $node.name || 'unnamed',
        type: $node.type || 'unknown'
      },
      timing: {
        timestamp: $now.toISOString(),
        date: $today.format('YYYY-MM-DD')
      }
    };

    console.log('Execution Context:', JSON.stringify(context, null, 2));
    return context;
  } catch (error) {
    console.error('Error logging context:', error);
    throw error;
  }
}
```

The implementation should use built-in variables and metadata to: 