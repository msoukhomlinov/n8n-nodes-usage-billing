---
description: n8n node, Common issues, solutions, and troubleshooting procedures for n8n node development, covering credentials, UI, and runtime problems. [troubleshooting, debugging, errors, credentials, ui, runtime]
globs: 
---
# n8n Node Troubleshooting Guide

1. Credential Issues
   ```typescript
   // Correct credential name matching
   export class MyApiCredentials implements ICredentialType {
     name = 'myApi';  // Must match credentials array in package.json
     displayName = 'My API';
   }

   // In package.json
   {
     "n8n": {
       "credentials": [
         "dist/credentials/myApi.credentials.js"  // Must match credential name
       ]
     }
   }
   ```

2. Node Registration
   ```json
   // package.json
   {
     "n8n": {
       "nodes": [
         "dist/nodes/MyNode/MyNode.node.js"  // Must match actual path
       ]
     }
   }
   ```

3. File Naming and Structure
   ```plaintext
   nodes/
   ├── MyNode/
   │   ├── MyNode.node.ts           # Main node file
   │   ├── MyNodeDescription.ts     # Description file
   │   ├── icon.svg                 # Icon file (60x60 for PNG, square canvas for SVG)
   │   └── GenericFunctions.ts      # Helper functions
   ```

4. Icon Implementation
   ```typescript
   export class MyNode implements INodeType {
     description: INodeTypeDescription = {
       displayName: 'My Node',
       name: 'myNode',
       icon: 'file:icon.svg',  // Must include 'file:' prefix
       // ... other properties
     };
   }
   ```

5. UI Display Properties
   ```typescript
   // Correct displayOptions referencing
   properties: [
     {
       displayName: 'Operation',
       name: 'operation',
       type: 'options',
       options: [
         {
           name: 'Create',
           value: 'create',
         }
       ],
     },
     {
       displayName: 'Fields',
       name: 'fields',
       displayOptions: {
         show: {
           operation: [
             'create',  // Must match exact value from options
           ],
         },
       },
     }
   ]
   ```

6. Error Handling Patterns
   ```typescript
   try {
     const credentials = await this.getCredentials('myApi');
     if (!credentials) {
       throw new Error('Credentials not found');
     }
   } catch (error) {
     throw new NodeOperationError(
       this.getNode(),
       'Authentication failed: ' + error.message,
       {
         description: 'Please check your credentials',
         level: 'warning',
       }
     );
   }
   ```

7. Development Workflow
   ```bash
   # After making changes to description properties
   npm run build
   npm unlink
   npm link
   # Restart n8n
   n8n start
   ```

8. Credential Problems
   - Verify credential name matches in all locations
   - Check credential file registration in package.json
   - Ensure proper credential type implementation
   - Validate credential properties

9. UI Display Issues
   - Clear browser cache after updates
   - Restart n8n after description changes
   - Verify icon file format and dimensions
   - Check displayOptions references

10. Node Registration
    - Verify package.json node paths
    - Check file and class naming consistency
    - Ensure proper module exports
    - Validate node registration

11. Runtime Errors
    - Check API response handling
    - Verify parameter validation
    - Test error handling implementation
    - Validate data transformations

12. Development Process
    - Rebuild after description changes
    - Re-link after structural changes
    - Clear cached files if needed
    - Restart n8n after updates

## Dependencies
[n8n-build-node_implementation.mdc](mdc:.cursor/rules/n8n-build-node_implementation.mdc)
[n8n-build-style-declarative_style.mdc](mdc:.cursor/rules/n8n-build-style-declarative_style.mdc)
[n8n-build-style-programmatic_style.mdc](mdc:.cursor/rules/n8n-build-style-programmatic_style.mdc)
[n8n-build-linting_standards.mdc](mdc:.cursor/rules/n8n-build-linting_standards.mdc)
